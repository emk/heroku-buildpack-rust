#!/usr/bin/env bash

set -e              # fail fast
set -o pipefail     # dont ignore errors when piping
# set -x            # enable debugging

# Configure directories
build_dir=$1
cache_dir=$2
env_dir=$3
bp_dir=$(cd $(dirname $0); cd ..; pwd)

# Load some convenience functions like status(), error(), protip() and indent()
source $bp_dir/bin/common.sh

# Load our configuration variables.
if [ -f "$build_dir/RustConfig" ]; then
  . "$build_dir/RustConfig"
else
  protip "Create RustConfig file and specify URL to point to a Rust and (optionally) Cargo bindary tarball."
  error "failed: No RustConfig file was found"
fi

# Check our configuration options.
if [ -z "$URL" ]; then
  error "failed: RustConfig must set URL to point to a Rust binary tarball."
fi
if [ -z "$VERSION" ]; then
  error "failed: RustConfig must set VERSION to indicate the Rust version."
fi

# Check our Cargo configuration options if we have Cargo.toxml.
if [ -f "$build_dir/Cargo.toml" ]; then
  status "info: Found Cargo.toml, using it to build project."

  if [ -z "$CARGO_URL" ]; then
    error "failed: RustConfig must set CARGO_URL to point to a Cargo binary tarball."
  fi
  if [ -z "$CARGO_VERSION" ]; then
    error "failed: RustConfig must set CARGO_VERSION to indicate the Cargo version."
  fi
fi

# Switch to our cache directory.
mkdir -p "$cache_dir"
cd "$cache_dir"

# Work around https://github.com/rust-lang/cargo/issues/598 on Ubuntu 10.04.
export SSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt

# Make sure we have the C++ runtime libraries required by the Rust nightly
# builds.
if [ -f lib/libstdc++.so.6.0.18 ]; then
  status "Using libstdc++.so.6.0.18"
else
  status "Downloading rust-support"
  rm -rf lib
  curl -O https://s3.amazonaws.com/rust-builds/rust-support.tar.gz
  tar xzvf rust-support.tar.gz
fi
LD_LIBRARY_PATH="$cache_dir/lib:$LD_LIBRARY_PATH"
export LD_LIBRARY_PATH

# Make sure we have the correct Rust binaries and set up PATH.
if [ -d rust-cache-$VERSION ]; then
  status "Using Rust version $VERSION"
else
  status "Downloading Rust version $VERSION binaries from $URL"

  rm -f rust.tar.gz
  rm -rf rust-cache-*
  curl -o rust.tar.gz "$URL"

  status "Extracting Rust binaries"

  mkdir rust-cache-$VERSION
  tar xzf rust.tar.gz -C rust-cache-$VERSION
  rm -r rust.tar.gz
fi
rust_path=`ls -1d "$cache_dir/rust-cache-$VERSION/"*"/"`
if [ ! -x "$rust_path/bin/rustc" ]; then
    error "failed: Cannot find rust binaries at $rust_path/bin"
fi
PATH="$rust_path/bin:$PATH"
LD_LIBRARY_PATH="$rust_path/lib:$LD_LIBRARY_PATH"
echo $LD_LIBRARY_PATH | indent

# Make sure that our final slug has all required libs from rust
status "Copying rustlib files"
[[ -d "$build_dir/rustlib" ]] && rm -r "$build_dir/rustlib"
cp -r "$rust_path/lib" "$build_dir/rustlib"

# Make sure that LD_LIBRARY_PATH when slug is run points to these libs
status "Setting default LD_LIBRARY_PATH"
mkdir -p $build_dir/.profile.d
cat > $build_dir/.profile.d/rust_link_path.sh <<EOF
# add rustc and project libs to LD_LIBRARY_PATH
export LD_LIBRARY_PATH=./target/release/deps/:./target/release/native/:./rustlib/:\$LD_LIBRARY_PATH
EOF

if [ -d "$cache_dir/app-cache" ]; then
  status "Using cached build artifacts to speedup incremental build"
  [[ -d "$build_dir/target" ]] && rm -r $build_dir/target
  cp -r $cache_dir/app-cache $build_dir/target
fi

if [ -f "$build_dir/Cargo.toml" ]; then
  if [ -d cargo-cache-$CARGO_VERSION ]; then
    status "Using Cargo version $CARGO_VERSION"
  else
    status "Downloading Cargo version $CARGO_VERSION binaries from $CARGO_URL"

    rm -f cargo.tar.gz
    rm -rf cargo-cache-*
    curl -o cargo.tar.gz "$CARGO_URL"

    status "Extracting Cargo binaries"

    mkdir cargo-cache-$CARGO_VERSION
    tar xzf cargo.tar.gz -C cargo-cache-$CARGO_VERSION
    rm -r cargo.tar.gz
  fi
  cargo_path=`ls -1d "$cache_dir/cargo-cache-$CARGO_VERSION/"*"/bin"`
  if [ ! -x "$cargo_path/cargo" ]; then
      error "failed: Cannot find cargo binaries at $cargo_path"
  fi
  PATH="$cargo_path:$PATH"

  # Make sure we have a fake home directory for the Cargo cache.  Ideally
  # we would keep these in our cache, but our ".git" directories don't
  # survive between builds.
  cargo_home="$cache_dir/cargo-home"
  mkdir -p $cargo_home

  # Build the actual application using Cargo.
  status "Building application using Cargo"

  cd "$build_dir"
  # To debug git issues:
  #export RUST_LOG="cargo::sources::git=debug"
  HOME="$cargo_home" cargo build --verbose --release | indent
else
  # Build the actual application using Make.
  status "Building application using Make"
  cd "$build_dir"
  make | indent
fi

status "Caching build artifacts"
[[ -d "$cache_dir/app-cache" ]] && rm -r $cache_dir/app-cache
cp -r target $cache_dir/app-cache
